var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => {
  return {
    set _(value) {
      __privateSet(obj, member, value, setter);
    },
    get _() {
      return __privateGet(obj, member, getter);
    }
  };
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};
var _collectionIndex, _groupIndex, _rollIndex, _idIndex, _DiceWorld, _DiceWorker, _loadWorld, loadWorld_fn, _connectWorld, connectWorld_fn, _makeRoll, makeRoll_fn, _parseGroup, parseGroup_fn;
function createCanvas(options) {
  const { selector, id } = options;
  if (!selector) {
    throw new Error("You must provide a selector in order to render the Dice Box");
  }
  const container = document.querySelector(selector);
  let canvas;
  if (container.nodeName.toLowerCase() !== "canvas") {
    canvas = document.createElement("canvas");
    canvas.id = id;
    container.appendChild(canvas);
  } else {
    canvas = container;
  }
  return canvas;
}
const encodedJs = "";
const blob = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs)], { type: "text/javascript;charset=utf-8" });
function WorkerWrapper() {
  const objURL = blob && (window.URL || window.webkitURL).createObjectURL(blob);
  try {
    return objURL ? new Worker(objURL, {}) : new Worker("data:application/javascript;base64," + encodedJs, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}
const createUUID = () => {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => {
    const crypto = window.crypto || window.msCrypto;
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
};
const debounce = (fn) => {
  let timeout;
  return function() {
    let context = this;
    let args = arguments;
    if (timeout) {
      window.cancelAnimationFrame(timeout);
    }
    timeout = window.requestAnimationFrame(function() {
      fn.apply(context, args);
    });
  };
};
const defaultOptions = {
  id: `dice-canvas-${Date.now()}`,
  enableShadows: true,
  delay: 10,
  gravity: 2,
  startingHeight: 8,
  spinForce: 4,
  throwForce: 5,
  scale: 4,
  theme: "diceOfRolling",
  offscreen: true,
  assetPath: "/assets/dice-box/",
  origin: location.origin
};
class World {
  constructor(container, options = {}) {
    __privateAdd(this, _loadWorld);
    __privateAdd(this, _connectWorld);
    __privateAdd(this, _makeRoll);
    __privateAdd(this, _parseGroup);
    __publicField(this, "rollCollectionData", {});
    __publicField(this, "rollGroupData", {});
    __publicField(this, "rollDiceData", {});
    __publicField(this, "themeData", []);
    __privateAdd(this, _collectionIndex, 0);
    __privateAdd(this, _groupIndex, 0);
    __privateAdd(this, _rollIndex, 0);
    __privateAdd(this, _idIndex, 0);
    __privateAdd(this, _DiceWorld, void 0);
    __publicField(this, "diceWorldInit");
    __privateAdd(this, _DiceWorker, void 0);
    __publicField(this, "diceWorkerInit");
    __publicField(this, "onDieComplete", () => {
    });
    __publicField(this, "onRollComplete", () => {
    });
    __publicField(this, "onRemoveComplete", () => {
    });
    console.log("2309420348903248902384902");
    this.config = __spreadValues(__spreadValues({}, defaultOptions), options);
    this.canvas = createCanvas({
      selector: container,
      id: this.config.id
    });
  }
  resizeWorld() {
    const resizeWorkers = () => {
      __privateGet(this, _DiceWorld).resize({ width: this.canvas.clientWidth, height: this.canvas.clientHeight });
      __privateGet(this, _DiceWorker).postMessage({ action: "resize", width: this.canvas.clientWidth, height: this.canvas.clientHeight });
    };
    const debounceResize = debounce(resizeWorkers);
    window.addEventListener("resize", debounceResize);
  }
  async init() {
    await __privateMethod(this, _loadWorld, loadWorld_fn).call(this);
    __privateMethod(this, _connectWorld, connectWorld_fn).call(this);
    this.resizeWorld();
    __privateGet(this, _DiceWorld).onInitComplete = () => {
      this.diceWorldInit();
    };
    __privateGet(this, _DiceWorld).onRollResult = (result) => {
      const die = this.rollDiceData[result.rollId];
      const group = this.rollGroupData[die.groupId];
      const collection = this.rollCollectionData[die.collectionId];
      group.rolls[die.rollId].value = result.value;
      collection.completedRolls++;
      if (collection.completedRolls == collection.rolls.length) {
        collection.resolve(Object.values(collection.rolls).map((_a) => {
          var _b = _a, { collectionId: collectionId2, id: id2 } = _b, rest = __objRest(_b, ["collectionId", "id"]);
          return rest;
        }));
      }
      const _c = die, { collectionId, id } = _c, returnDie = __objRest(_c, ["collectionId", "id"]);
      this.onDieComplete(returnDie);
    };
    __privateGet(this, _DiceWorld).onRollComplete = () => {
      this.onRollComplete(this.getRollResults());
    };
    __privateGet(this, _DiceWorld).onDieRemoved = (rollId) => {
      let die = this.rollDiceData[rollId];
      const collection = this.rollCollectionData[die.removeCollectionId];
      collection.completedRolls++;
      delete this.rollDiceData[die.rollId];
      const group = this.rollGroupData[die.groupId];
      delete group.rolls[die.rollId];
      const groupData = __privateMethod(this, _parseGroup, parseGroup_fn).call(this, die.groupId);
      group.value = groupData.value;
      group.qty = groupData.rollsArray.length;
      if (collection.completedRolls == collection.rolls.length) {
        collection.resolve(Object.values(collection.rolls).map((_a) => {
          var _b = _a, { id: id2 } = _b, rest = __objRest(_b, ["id"]);
          return rest;
        }));
      }
      const _c = die, { collectionId, id, removeCollectionId } = _c, returnDie = __objRest(_c, ["collectionId", "id", "removeCollectionId"]);
      this.onRemoveComplete(returnDie);
    };
    __privateGet(this, _DiceWorker).postMessage({
      action: "init",
      width: this.canvas.clientWidth,
      height: this.canvas.clientHeight,
      options: this.config
    });
    __privateGet(this, _DiceWorker).onmessage = (e) => {
      switch (e.data.action) {
        case "init-complete":
          this.diceWorkerInit();
      }
    };
    await Promise.all([__privateGet(this, _DiceWorld).init, __privateGet(this, _DiceWorker).init]);
    return this;
  }
  updateConfig(options) {
    const newConfig = __spreadValues(__spreadValues({}, this.config), options);
    this.config = newConfig;
    __privateGet(this, _DiceWorld).updateConfig(newConfig);
    __privateGet(this, _DiceWorker).postMessage({
      action: "updateConfig",
      options: newConfig
    });
    return this;
  }
  clear() {
    __privateSet(this, _collectionIndex, 0);
    __privateSet(this, _groupIndex, 0);
    __privateSet(this, _rollIndex, 0);
    __privateSet(this, _idIndex, 0);
    this.rollCollectionData = {};
    this.rollGroupData = {};
    this.rollDiceData = {};
    __privateGet(this, _DiceWorld).clear();
    __privateGet(this, _DiceWorker).postMessage({ action: "clearDice" });
    return this;
  }
  hide() {
    this.canvas.style.display = "none";
    return this;
  }
  show() {
    this.canvas.style.display = "block";
    return this;
  }
  roll(notation, { theme = void 0, newStartPoint = true } = {}) {
    this.clear();
    const collectionId = __privateWrapper(this, _collectionIndex)._++;
    this.rollCollectionData[collectionId] = new Collection({
      id: collectionId,
      notation,
      theme,
      anustart: newStartPoint
    });
    const parsedNotation = this.createNotationArray(notation);
    __privateMethod(this, _makeRoll, makeRoll_fn).call(this, parsedNotation, collectionId);
    return this.rollCollectionData[collectionId].promise;
  }
  add(notation, { theme = void 0, newStartPoint = true } = {}) {
    const collectionId = __privateWrapper(this, _collectionIndex)._++;
    this.rollCollectionData[collectionId] = new Collection({
      id: collectionId,
      notation,
      theme,
      anustart: newStartPoint
    });
    const parsedNotation = this.createNotationArray(notation);
    __privateMethod(this, _makeRoll, makeRoll_fn).call(this, parsedNotation, collectionId);
    return this.rollCollectionData[collectionId].promise;
  }
  reroll(notation, { remove = false, hide = false, newStartPoint = true } = {}) {
    const rollArray = Array.isArray(notation) ? notation : [notation];
    const cleanNotation = rollArray.map((_a) => {
      var _b = _a, { value } = _b, rest = __objRest(_b, ["value"]);
      return rest;
    });
    if (remove === true) {
      this.remove(cleanNotation, { hide });
    }
    return this.add(cleanNotation, { newStartPoint });
  }
  remove(notation, { hide = false } = {}) {
    const rollArray = Array.isArray(notation) ? notation : [notation];
    const collectionId = __privateWrapper(this, _collectionIndex)._++;
    this.rollCollectionData[collectionId] = new Collection({
      id: collectionId,
      notation,
      rolls: rollArray
    });
    rollArray.map((die) => {
      this.rollDiceData[die.rollId].removeCollectionId = collectionId;
      let id = this.rollDiceData[die.rollId].id;
      __privateGet(this, _DiceWorld).remove({ id, rollId: die.rollId });
      __privateGet(this, _DiceWorker).postMessage({ action: "removeDie", id });
    });
    return this.rollCollectionData[collectionId].promise;
  }
  async loadTheme(theme) {
    if (this.themeData.includes(theme)) {
      return;
    } else {
      await __privateGet(this, _DiceWorld).loadTheme(theme);
      this.themeData.push(theme);
    }
  }
  createNotationArray(input) {
    const notation = Array.isArray(input) ? input : [input];
    let parsedNotation = [];
    const verifyObject = (object) => {
      if (!object.hasOwnProperty("qty")) {
        object.qty = 1;
      }
      if (object.hasOwnProperty("sides")) {
        return true;
      } else {
        const err = "Roll notation is missing sides";
        throw new Error(err);
      }
    };
    const incrementId = (key) => {
      key = key.toString();
      let splitKey = key.split(".");
      if (splitKey[1]) {
        splitKey[1] = parseInt(splitKey[1]) + 1;
      } else {
        splitKey[1] = 1;
      }
      return splitKey[0] + "." + splitKey[1];
    };
    const verifyRollId = (object) => {
      if (object.hasOwnProperty("rollId")) {
        if (this.rollDiceData.hasOwnProperty(object.rollId)) {
          object.rollId = incrementId(object.rollId);
        }
      }
    };
    notation.forEach((roll) => {
      if (typeof roll === "string") {
        parsedNotation.push(this.parse(roll));
      } else if (typeof notation === "object") {
        verifyRollId(roll);
        verifyObject(roll) && parsedNotation.push(roll);
      }
    });
    return parsedNotation;
  }
  parse(notation) {
    const diceNotation = /(\d+)[dD](\d+)(.*)$/i;
    const modifier = /([+-])(\d+)/;
    const cleanNotation = notation.trim().replace(/\s+/g, "");
    const validNumber = (n, err) => {
      n = Number(n);
      if (Number.isNaN(n) || !Number.isInteger(n) || n < 1) {
        throw new Error(err);
      }
      return n;
    };
    const roll = cleanNotation.match(diceNotation);
    let mod = 0;
    const msg = "Invalid notation: " + notation;
    if (roll.length < 3) {
      throw new Error(msg);
    }
    if (roll[3] && modifier.test(roll[3])) {
      const modParts = roll[3].match(modifier);
      let basicMod = validNumber(modParts[2], msg);
      if (modParts[1].trim() === "-") {
        basicMod *= -1;
      }
      mod = basicMod;
    }
    roll[1] = validNumber(roll[1], msg);
    roll[2] = validNumber(roll[2], msg);
    return {
      qty: roll[1],
      sides: roll[2],
      modifier: mod
    };
  }
  getRollResults() {
    return Object.entries(this.rollGroupData).map(([key, val]) => {
      const groupData = __privateMethod(this, _parseGroup, parseGroup_fn).call(this, key);
      val.value = groupData.value;
      val.qty = groupData.rollsArray.length;
      const groupCopy = __spreadValues({}, val);
      groupCopy.rolls = groupData.rollsArray;
      return groupCopy;
    });
  }
}
_collectionIndex = new WeakMap();
_groupIndex = new WeakMap();
_rollIndex = new WeakMap();
_idIndex = new WeakMap();
_DiceWorld = new WeakMap();
_DiceWorker = new WeakMap();
_loadWorld = new WeakSet();
loadWorld_fn = async function() {
  if ("OffscreenCanvas" in window && "transferControlToOffscreen" in this.canvas && this.config.offscreen) {
    const WorldOffscreen = await import("./world.offscreen.js").then((module) => module.default);
    __privateSet(this, _DiceWorld, new WorldOffscreen({
      canvas: this.canvas,
      options: this.config
    }));
  } else {
    if (this.config.offscreen) {
      console.warn("This browser does not support OffscreenCanvas. Using standard canvas fallback.");
      this.config.offscreen = false;
    }
    const WorldOnscreen = await import("./world.onscreen.js").then((module) => module.default);
    __privateSet(this, _DiceWorld, new WorldOnscreen({
      canvas: this.canvas,
      options: this.config
    }));
  }
};
_connectWorld = new WeakSet();
connectWorld_fn = function() {
  const channel = new MessageChannel();
  __privateGet(this, _DiceWorld).init = new Promise((resolve, reject) => {
    this.diceWorldInit = resolve;
  });
  __privateGet(this, _DiceWorld).connect(channel.port1);
  __privateSet(this, _DiceWorker, new WorkerWrapper());
  __privateGet(this, _DiceWorker).init = new Promise((resolve, reject) => {
    this.diceWorkerInit = resolve;
  });
  __privateGet(this, _DiceWorker).postMessage({
    action: "connect"
  }, [channel.port2]);
};
_makeRoll = new WeakSet();
makeRoll_fn = async function(parsedNotation, collectionId) {
  const collection = this.rollCollectionData[collectionId];
  let anustart = collection.anustart;
  parsedNotation.forEach(async (notation) => {
    const theme = notation.theme || collection.theme || this.config.theme;
    const rolls = {};
    const hasGroupId = notation.groupId !== void 0;
    let index;
    await this.loadTheme(theme);
    for (var i = 0, len = notation.qty; i < len; i++) {
      let rollId = notation.rollId !== void 0 ? notation.rollId : __privateWrapper(this, _rollIndex)._++;
      let id = notation.id !== void 0 ? notation.id : __privateWrapper(this, _idIndex)._++;
      index = hasGroupId ? notation.groupId : __privateGet(this, _groupIndex);
      const roll = {
        sides: notation.sides,
        groupId: index,
        collectionId: collection.id,
        rollId,
        id,
        theme
      };
      rolls[rollId] = roll;
      this.rollDiceData[rollId] = roll;
      collection.rolls.push(this.rollDiceData[rollId]);
      __privateGet(this, _DiceWorld).add(__spreadProps(__spreadValues({}, roll), { anustart }));
      anustart = false;
    }
    if (hasGroupId) {
      Object.assign(this.rollGroupData[index].rolls, rolls);
    } else {
      notation.rolls = rolls;
      notation.id = index;
      this.rollGroupData[index] = notation;
      ++__privateWrapper(this, _groupIndex)._;
    }
  });
};
_parseGroup = new WeakSet();
parseGroup_fn = function(groupId) {
  const rollGroup = this.rollGroupData[groupId];
  const rollsArray = Object.values(rollGroup.rolls).map((_a) => {
    var _b = _a, { collectionId, id } = _b, rest = __objRest(_b, ["collectionId", "id"]);
    return rest;
  });
  let value = rollsArray.reduce((val, roll) => {
    const rollVal = isNaN(roll.value) ? 0 : roll.value;
    return val + rollVal;
  }, 0);
  value += rollGroup.modifier ? rollGroup.modifier : 0;
  return { value, rollsArray };
};
class Collection {
  constructor(options) {
    Object.assign(this, options);
    this.rolls = options.rolls || [];
    this.completedRolls = 0;
    const that = this;
    this.promise = new Promise((resolve, reject) => {
      that.resolve = resolve;
      that.reject = reject;
    });
  }
}
export { createUUID as c, World as default };
